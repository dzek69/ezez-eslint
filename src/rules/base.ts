import { truthy } from "@ezez/utils";

import type { Linter } from "eslint";
import type { MergedOptions } from "../types.js";

import { ERROR, OFF, WARN } from "./_states.js";

const get = (mergedOptions: MergedOptions): Linter.FlatConfig[] => {
    return [
        mergedOptions.base?.possibleProblems && {
            name: "Base possible problems",
            rules: {
            // TODO check for each problably does not makes sense for TS - check
                "array-callback-return": ERROR({ checkForEach: true, allowImplicit: true, allowVoid: false }),
                "constructor-super": ERROR(),
                "for-direction": ERROR(),
                "getter-return": ERROR({ allowImplicit: true }),
                "no-async-promise-executor": ERROR(),
                "no-await-in-loop": OFF(),
                "no-class-assign": ERROR(),
                "no-compare-neg-zero": ERROR(),
                "no-cond-assign": ERROR("except-parens"),
                "no-const-assign": ERROR(),
                "no-constant-binary-expression": ERROR(),
                "no-constant-condition": ERROR({ checkLoops: true }),
                "no-constructor-return": WARN(),
                "no-control-regex": OFF(),
                "no-debugger": ERROR(),
                "no-dupe-args": ERROR(),
                "no-dupe-class-members": ERROR(),
                "no-dupe-else-if": ERROR(),
                "no-dupe-keys": ERROR(),
                "no-duplicate-case": ERROR(),
                "no-duplicate-imports": ERROR({
                    includeExports: true,
                    allowSeparateTypeImports: true,
                }),
                "no-empty-character-class": ERROR(),
                "no-empty-pattern": ERROR({ allowObjectPatternsAsParameters: false }),
                "no-ex-assign": ERROR(),
                "no-fallthrough": WARN(), // TODO verify options
                "no-func-assign": ERROR(),
                "no-import-assign": ERROR(),
                "no-inner-declarations": ERROR("both"),
                "no-invalid-regexp": ERROR({ allowConstructorFlags: [] }),
                "no-irregular-whitespace": ERROR({
                    skipStrings: true,
                    skipComments: false,
                    skipRegExps: true,
                    skipTemplates: true,
                    skipJSXText: false,
                }),
                "no-loss-of-precision": ERROR(),
                "no-misleading-character-class": ERROR({ allowEscape: false }),
                "no-new-native-nonconstructor": ERROR(),
                "no-obj-calls": ERROR(),
                "no-promise-executor-return": ERROR({ allowVoid: false }),
                "no-prototype-builtins": OFF(),
                "no-self-assign": ERROR({ props: true }),
                "no-self-compare": ERROR(),
                "no-setter-return": ERROR(),
                "no-sparse-arrays": WARN(),
                "no-template-curly-in-string": WARN(),
                "no-this-before-super": ERROR(),
                "no-unassigned-vars": OFF(), // no-unused-vars covers this
                "no-undef": ERROR({ typeof: false }),
                "no-unexpected-multiline": WARN(),
                "no-unmodified-loop-condition": ERROR(),
                "no-unreachable": ERROR(),
                "no-unreachable-loop": ERROR(),
                "no-unsafe-finally": ERROR(),
                "no-unsafe-negation": ERROR({ enforceForOrderingRelations: true }),
                "no-unsafe-optional-chaining": ERROR({ disallowArithmeticOperators: true }),
                "no-unused-private-class-members": ERROR(),
                "no-unused-vars": ERROR({
                    vars: "all",
                    varsIgnorePattern: undefined,
                    args: "none",
                    argsIgnorePattern: undefined,
                    caughtErrors: "all", // can omit `(error)` otherwise
                    caughtErrorsIgnorePattern: undefined,
                    destructuredArrayIgnorePattern: "^_",
                    ignoreRestSiblings: true,
                    ignoreClassWithStaticInitBlock: false,
                    reportUsedIgnorePattern: false,
                }),
                "no-use-before-define": WARN({
                    functions: true,
                    classes: true,
                    variables: true,
                    allowNamedExports: false,
                }),
                "no-useless-assignment": ERROR(),
                "no-useless-backreference": WARN(),
                "require-atomic-updates": ERROR({
                    allowProperties: false,
                }),
                "use-isnan": ERROR({
                    enforceForSwitchCase: true,
                    enforceForIndexOf: true,
                }),
                "valid-typeof": ERROR({ requireStringLiterals: true }),
            },
        },
        mergedOptions.base?.suggestions && {
            name: "Base suggestions",
            rules: {
                "accessor-pairs": OFF(),
                "arrow-body-style": OFF(),
                "block-scoped-var": OFF(),
                "camelcase": ERROR({
                    properties: "always",
                    ignoreDestructuring: false,
                    ignoreImports: true,
                    ignoreGlobals: false,
                // allow: ["^UNSAFE_"], @TODO say something about in the README & REACT
                }),
                "capitalized-comments": OFF(),
                "class-methods-use-this": OFF(),
                "complexity": OFF(),
                "consistent-return": OFF(),
                "consistent-this": OFF(),
                "curly": ERROR("all"),
                "default-case": OFF(),
                "default-case-last": ERROR(),
                "default-param-last": ERROR(),
                "dot-notation": ERROR({ allowKeywords: true, allowPattern: undefined }),
                "eqeqeq": ERROR("always", { null: "ignore" }),
                "func-name-matching": OFF(),
                "func-names": ERROR("as-needed"),
                "func-style": ERROR("expression"), // has overrides option but we don't use it
                "grouped-accessor-pairs": ERROR("getBeforeSet"),
                "guard-for-in": WARN(),
                "id-denylist": OFF(),
                "id-length": OFF(),
                "id-match": OFF(),
                "init-declarations": OFF(),
                "logical-assignment-operators": ERROR("never"),
                "max-classes-per-file": OFF(),
                "max-depth": ERROR({
                    max: 5,
                }),
                "max-lines": ERROR({
                    max: 200,
                    skipBlankLines: true,
                    skipComments: true,
                }),
                "max-lines-per-function": ERROR({
                    max: 50,
                    skipBlankLines: true, // these on 03.10.2018 are documented wrong @TODO suggest a fix
                    skipComments: true,
                    IIFEs: false,
                }),
                "max-nested-callbacks": OFF(), // max-depth will handle this
                "max-params": OFF(),
                "max-statements": ERROR({
                    max: 15,
                // ignoreTopLevelFunctions: false,
                }),
                "new-cap": WARN({
                    newIsCap: true,
                    capIsNew: true,
                    // newIsCapExceptions: undefined,
                    // newIsCapExceptionPattern: undefined,
                    // capIsNewExceptions: undefined,
                    // capIsNewExceptionPattern: undefined,
                    properties: true,
                }),
                "no-alert": OFF(),
                "no-array-constructor": ERROR(),
                "no-bitwise": OFF(),
                "no-caller": ERROR(),
                "no-case-declarations": OFF(),
                "no-console": ERROR({ allow: ["error", "info", "warn"] }),
                "no-continue": OFF(),
                "no-delete-var": ERROR(),
                "no-div-regex": OFF(),
                "no-else-return": ERROR({ allowElseIf: false }),
                "no-empty": WARN({ allowEmptyCatch: true }),
                "no-empty-function": ERROR({ allow: [] }),
                "no-empty-static-block": ERROR(),
                "no-eq-null": OFF(), // eqeqeq takes care of that anyway
                "no-eval": ERROR({ allowIndirect: false }),
                "no-extend-native": ERROR({ exceptions: [] }),
                "no-extra-bind": ERROR(),
                "no-extra-boolean-cast": ERROR({ enforceForInnerExpressions: true }),
                "no-extra-label": ERROR(),
                "no-global-assign": ERROR({ exceptions: [] }),
                // @TODO should disallowTemplateShorthand be true? one of ts rules asks for template strings instead of adding
                // things ⬇️
                "no-implicit-coercion": ERROR({
                    boolean: true, string: true, number: true, disallowTemplateShorthand: false, allow: [],
                }),
                "no-implicit-globals": ERROR({ lexicalBindings: false }), // @TODO something about making it true in README?
                "no-implied-eval": ERROR(),
                "no-inline-comments": OFF(),
                "no-invalid-this": ERROR(),
                "no-iterator": ERROR(),
                "no-label-var": ERROR(),
                "no-labels": OFF(),
                "no-lone-blocks": OFF(),
                "no-lonely-if": OFF(),
                "no-loop-func": ERROR(),
                "no-magic-numbers": ERROR({
                    ignore: [0, 1],
                    ignoreArrayIndexes: true,
                    ignoreDefaultValues: false,
                    ignoreClassFieldInitialValues: false,
                    enforceConst: false,
                    detectObjects: false,
                }),
                "no-multi-assign": OFF(),
                "no-multi-str": WARN(),
                "no-negated-condition": OFF(),
                "no-nested-ternary": OFF(),
                "no-new": ERROR(),
                "no-new-func": ERROR(),
                "no-new-wrappers": ERROR(),
                "no-nonoctal-decimal-escape": ERROR(),
                "no-object-constructor": ERROR(),
                "no-octal": ERROR(),
                "no-octal-escape": ERROR(),
                "no-param-reassign": ERROR({
                    props: true,
                    ignorePropertyModificationsFor: [],
                // ignorePropertyModificationsForRegex: //,
                }),
                "no-plusplus": OFF(),
                "no-proto": ERROR(),
                "no-redeclare": ERROR({ builtinGlobals: true }),
                "no-regex-spaces": ERROR(),
                "no-restricted-exports": OFF(),
                "no-restricted-globals": OFF(), // can't really define globals in 2025
                "no-restricted-imports": OFF(),
                "no-restricted-properties": OFF(),
                "no-restricted-syntax": OFF(),
                "no-return-assign": ERROR("except-parens"),
                "no-script-url": OFF(),
                "no-sequences": WARN({ allowInParentheses: true }),
                "no-shadow": ERROR({
                    builtinGlobals: true,
                    hoist: "all",
                    ignoreOnInitialization: true,
                    allow: mergedOptions.config!.allowShadow ?? [],
                }),
                "no-shadow-restricted-names": ERROR({
                    reportGlobalThis: true,
                }),
                "no-ternary": OFF(),
                "no-throw-literal": ERROR(),
                "no-undef-init": OFF(), // init-declarations should take care of this anyway
                "no-undefined": OFF(), // no-redeclare will guard for shadowing, ES5 disallows to overwrite global
                "no-underscore-dangle": OFF(),
                "no-unneeded-ternary": ERROR({ defaultAssignment: true }),
                "no-unused-expressions": ERROR({
                    allowShortCircuit: true,
                    allowTernary: false,
                    allowTaggedTemplates: false,
                    enforceForJSX: true,
                }),
                "no-unused-labels": ERROR(), // @TODO put on a list to disable in tests
                "no-useless-call": OFF(),
                "no-useless-catch": ERROR(),
                "no-useless-computed-key": ERROR({ enforceForClassMembers: true }),
                "no-useless-concat": ERROR(),
                "no-useless-constructor": ERROR(),
                "no-useless-escape": ERROR(),
                "no-useless-rename": ERROR({
                    ignoreImport: false,
                    ignoreExport: false,
                    ignoreDestructuring: false,
                }),
                "no-useless-return": OFF(), // TODO turn on when autofix can be disabled
                "no-var": ERROR(),
                "no-void": ERROR({ allowAsStatement: false }),
                "no-warning-comments": ERROR({
                    terms: ["FIXME", "@fixme"],
                    location: "anywhere",
                }),
                "no-with": ERROR(),
                "object-shorthand": ERROR("always", {
                    avoidQuotes: true,
                    ignoreConstructors: false,
                    avoidExplicitReturnArrows: false,
                }),
                "one-var": ERROR({
                    var: "consecutive",
                    let: "consecutive",
                    const: "never",
                }),
                "operator-assignment": OFF(),
                "prefer-arrow-callback": OFF(),
                "prefer-const": ERROR({
                    destructuring: "any",
                    ignoreReadBeforeAssign: true,
                }),
                "prefer-destructuring": OFF(),
                "prefer-exponentiation-operator": OFF(),
                "prefer-named-capture-group": OFF(),
                "prefer-numeric-literals": ERROR(),
                "prefer-object-has-own": OFF(), // @TODO enable around 2025
                "prefer-object-spread": ERROR(),
                "prefer-promise-reject-errors": ERROR({ allowEmptyReject: false }),
                "prefer-regex-literals": ERROR({ disallowRedundantWrapping: true }),
                "prefer-rest-params": ERROR(),
                "prefer-spread": ERROR(),
                "prefer-template": OFF(),
                "preserve-caught-error": ERROR({
                    requireCatchParameter: true,
                }),
                "radix": ERROR("always"),
                "require-await": WARN(),
                "require-unicode-regexp": ERROR({
                    requireFlag: undefined, // TODO allow to set this externally
                }),
                "require-yield": WARN(),
                "sort-imports": OFF(),
                "sort-keys": OFF(), // @TODO contribute to docs and write about performance of varying keys order
                "sort-vars": OFF(),
                "strict": ERROR("safe"),
                "symbol-description": WARN(),
                "vars-on-top": ERROR(),
                "yoda": ERROR("never"),
            },
        },
        mergedOptions.base?.deprecated && {
            name: "Base deprecated",
            rules: {
                "no-return-await": ERROR(),
            },
        },
    ].filter(truthy);
};

export {
    get,
};
